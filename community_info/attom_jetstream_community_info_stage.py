from amherst_common.amherst_logger import AmherstLogger
from pyspark.sql import SparkSession
from pyspark.sql import DataFrame
from pyspark.sql.types import *
from datetime import datetime
import pyspark.sql.functions as F
import pytz
import argparse
import json
import os
import pathlib


def main(args):
    raw_folder = args.input
    stage_folder = args.output
    bad_folder = args.bad_data
    schema_file = args.schema

    log.info(f'Raw Folder: {raw_folder}')
    log.info(f'Stage Folder: {stage_folder}')
    log.info(f'Bad Folder: {bad_folder}')
    log.info(f'Log Folder: {args.log}')
    log.info(f'Schema File: {schema_file}')

    log.info('Extracting from raw folder.')
    df = extract(raw_folder, schema_file)

    log.info('Running transformations.')
    transformed_df = transform(df)

    # ORC files for bad data
    if bad_folder:
        log.info('Load bad records.')
        bad_records = (
            transformed_df
                .where(F.col('_bad_data').isNotNull())
                .cache()
                .select('_bad_data')
        )
        load_bad(bad_records, bad_folder)

    log.info('Loading data to HDFS.')
    final_df = transformed_df.where(F.col('_bad_data').isNull()).drop('_bad_data')
    # create ORC files for good data
    load(final_df, stage_folder)
    log.info('Update table partitions.')
    # Update Hive table partitions
    update('attomjetstream_stage.community_info_hist')


def extract(source_path: str, schema_path: str):
    """
    Extract the source data from raw.
    """
    source_path = source_path + '/community*'
    # TODO: Additional validation (schema, etc.)
    schema = get_schema(schema_path)
    return spark.read.csv(source_path, schema=schema, mode='PERMISSIVE', sep='\t', ignoreLeadingWhiteSpace=True, ignoreTrailingWhiteSpace=True)


# TODO: Move this to a common/library module since used in multiple modules.
def get_schema(schema_path: str):
    """
    Given a path to a json schema file, this function will return a StructType from it.
    """
    json_dict = {}
    with open(schema_path, 'r') as file:
        json_dict = json.load(file)

    return StructType.fromJson(json_dict)


def transform(data):
    """
    Transform the source data.
    """
    df = (data
          .withColumn('geo_type', F.col('geo_type'))
          .withColumn('geo_id', F.col('geo_id'))
          .withColumn('geo_nm', F.col('geo_nm'))
          .withColumn('longitude', F.col('longitude'))
          .withColumn('latitude', F.col('latitude'))
          .withColumn('area_sq_mi', F.col('area_sq_mi'))
          .withColumn('population_1990', F.col('population_1990'))
          .withColumn('population_2000', F.col('population_2000'))
          .withColumn('population_2010', F.col('population_2010'))
          .withColumn('population', F.col('population'))
          .withColumn('population_5_yr_projection', F.col('population_5_yr_projection'))
          .withColumn('population_density_sq_mi', F.col('population_density_sq_mi'))
          .withColumn('population_chg_pct_1990', F.col('population_chg_pct_1990'))
          .withColumn('population_chg_pct_2000', F.col('population_chg_pct_2000'))
          .withColumn('population_chg_pct_2010', F.col('population_chg_pct_2010'))
          .withColumn('population_chg_pct_5_yr_projection', F.col('population_chg_pct_5_yr_projection'))
          .withColumn('households_1990', F.col('households_1990'))
          .withColumn('households_2000', F.col('households_2000'))
          .withColumn('households_2010', F.col('households_2010'))
          .withColumn('households', F.col('households'))
          .withColumn('households_5_yr_projection', F.col('households_5_yr_projection'))
          .withColumn('household_chg_pct_1990', F.col('household_chg_pct_1990'))
          .withColumn('household_chg_pct_2000', F.col('household_chg_pct_2000'))
          .withColumn('household_chg_pct_2010', F.col('household_chg_pct_2010'))
          .withColumn('household_chg_pct_5_yr_projection', F.col('household_chg_pct_5_yr_projection'))
          .withColumn('household_size_avg', F.col('household_size_avg'))
          .withColumn('population_family_pct', F.col('population_family_pct'))
          .withColumn('population_non_family_pct', F.col('population_non_family_pct'))
          .withColumn('households_family', F.col('households_family'))
          .withColumn('households_non_family', F.col('households_non_family'))
          .withColumn('households_family_pct', F.col('households_family_pct'))
          .withColumn('households_non_family_pct', F.col('households_non_family_pct'))
          .withColumn('households_family_married_pct', F.col('households_family_married_pct'))
          .withColumn('households_family_other_pct', F.col('households_family_other_pct'))
          .withColumn('hh_fam_other_male_householder_no_wife_present_pct', F.col('hh_fam_other_male_householder_no_wife_present_pct'))
          .withColumn('hh_fam_other_female_householder_no_husband_present_pct', F.col('hh_fam_other_female_householder_no_husband_present_pct'))
          .withColumn('hh_fam_married_w_children_l18_pct', F.col('hh_fam_married_w_children_l18_pct'))
          .withColumn('hh_fam_married_wo_children_l18_pct', F.col('hh_fam_married_wo_children_l18_pct'))
          .withColumn('hh_fam_other_male_hh_no_wife_present_w_children_l18_pct', F.col('hh_fam_other_male_hh_no_wife_present_w_children_l18_pct'))
          .withColumn('hh_fam_other_male_hh_no_wife_present_wo_children_l18_pct', F.col('hh_fam_other_male_hh_no_wife_present_wo_children_l18_pct'))
          .withColumn('hh_fam_other_female_hh_no_husband_pres_w_children_l18_pct', F.col('hh_fam_other_female_hh_no_husband_pres_w_children_l18_pct'))
          .withColumn('hh_fam_other_female_hh_no_husband_pres_wo_children_l18_pct', F.col('hh_fam_other_female_hh_no_husband_pres_wo_children_l18_pct'))
          .withColumn('hh_non_family_male_householder_pct', F.col('hh_non_family_male_householder_pct'))
          .withColumn('hh_non_family_male_hh_w_children_l18_pct', F.col('hh_non_family_male_hh_w_children_l18_pct'))
          .withColumn('hh_non_family_male_hh_wo_children_l18_pct', F.col('hh_non_family_male_hh_wo_children_l18_pct'))
          .withColumn('hh_non_family_female_householder_pct', F.col('hh_non_family_female_householder_pct'))
          .withColumn('hh_non_family_female_hh_w_children_l18_pct', F.col('hh_non_family_female_hh_w_children_l18_pct'))
          .withColumn('hh_non_family_female_hh_wo_children_l18_pct', F.col('hh_non_family_female_hh_wo_children_l18_pct'))
          .withColumn('households_family_w_children_pct', F.col('households_family_w_children_pct'))
          .withColumn('households_family_wo_children_pct', F.col('households_family_wo_children_pct'))
          .withColumn('households_non_family_w_children_pct', F.col('households_non_family_w_children_pct'))
          .withColumn('households_non_family_wo_children_pct', F.col('households_non_family_wo_children_pct'))
          .withColumn('population_urban_pct', F.col('population_urban_pct'))
          .withColumn('population_rural_pct', F.col('population_rural_pct'))
          .withColumn('population_male_pct', F.col('population_male_pct'))
          .withColumn('population_female_pct', F.col('population_female_pct'))
          .withColumn('population_white_pct', F.col('population_white_pct'))
          .withColumn('population_black_pct', F.col('population_black_pct'))
          .withColumn('population_asian_pct', F.col('population_asian_pct'))
          .withColumn('population_american_indian_or_alaskan_native_pct', F.col('population_american_indian_or_alaskan_native_pct'))
          .withColumn('population_multiracial_pct', F.col('population_multiracial_pct'))
          .withColumn('population_other_race_pct', F.col('population_other_race_pct'))
          .withColumn('population_white_hispanic_pct', F.col('population_white_hispanic_pct'))
          .withColumn('population_white_non_hispanic_pct', F.col('population_white_non_hispanic_pct'))
          .withColumn('population_non_white_hispanic_pct', F.col('population_non_white_hispanic_pct'))
          .withColumn('population_non_white_non_hispanic_pct', F.col('population_non_white_non_hispanic_pct'))
          .withColumn('population_hispanic_pct', F.col('population_hispanic_pct'))
          .withColumn('population_non_hispanic_pct', F.col('population_non_hispanic_pct'))
          .withColumn('households_white_pct', F.col('households_white_pct'))
          .withColumn('households_black_pct', F.col('households_black_pct'))
          .withColumn('households_asian_pct', F.col('households_asian_pct'))
          .withColumn('households_american_indian_or_alaskan_native_pct', F.col('households_american_indian_or_alaskan_native_pct'))
          .withColumn('households_multiracial_pct', F.col('households_multiracial_pct'))
          .withColumn('households_other_race_pct', F.col('households_other_race_pct'))
          .withColumn('households_white_hispanic_pct', F.col('households_white_hispanic_pct'))
          .withColumn('households_white_non_hispanic_pct', F.col('households_white_non_hispanic_pct'))
          .withColumn('households_non_white_hispanic_pct', F.col('households_non_white_hispanic_pct'))
          .withColumn('households_non_white_non_hispanic_pct', F.col('households_non_white_non_hispanic_pct'))
          .withColumn('households_hispanic_pct', F.col('households_hispanic_pct'))
          .withColumn('households_non_hispanic_pct', F.col('households_non_hispanic_pct'))
          .withColumn('median_age', F.col('median_age'))
          .withColumn('population_aged_0_5_pct', F.col('population_aged_0_5_pct'))
          .withColumn('population_aged_6_11_pct', F.col('population_aged_6_11_pct'))
          .withColumn('population_aged_12_17_pct', F.col('population_aged_12_17_pct'))
          .withColumn('population_aged_18_24_pct', F.col('population_aged_18_24_pct'))
          .withColumn('population_aged_25_34_pct', F.col('population_aged_25_34_pct'))
          .withColumn('population_aged_35_44_pct', F.col('population_aged_35_44_pct'))
          .withColumn('population_aged_45_54_pct', F.col('population_aged_45_54_pct'))
          .withColumn('population_aged_55_64_pct', F.col('population_aged_55_64_pct'))
          .withColumn('population_aged_65_74_pct', F.col('population_aged_65_74_pct'))
          .withColumn('population_aged_75_84_pct', F.col('population_aged_75_84_pct'))
          .withColumn('population_aged_85p_pct', F.col('population_aged_85p_pct'))
          .withColumn('white_median_age', F.col('white_median_age'))
          .withColumn('black_median_age', F.col('black_median_age'))
          .withColumn('asian_median_age', F.col('asian_median_age'))
          .withColumn('american_indian_or_alaskan_native_median_age', F.col('american_indian_or_alaskan_native_median_age'))
          .withColumn('multiracial_median_age', F.col('multiracial_median_age'))
          .withColumn('other_race_median_age', F.col('other_race_median_age'))
          .withColumn('hispanic_median_age', F.col('hispanic_median_age'))
          .withColumn('white_non_hispanic_median_age', F.col('white_non_hispanic_median_age'))
          .withColumn('male_median_age', F.col('male_median_age'))
          .withColumn('female_median_age', F.col('female_median_age'))
          .withColumn('population_male_aged_0_5_pct', F.col('population_male_aged_0_5_pct'))
          .withColumn('population_male_aged_6_11_pct', F.col('population_male_aged_6_11_pct'))
          .withColumn('population_male_aged_12_17_pct', F.col('population_male_aged_12_17_pct'))
          .withColumn('population_male_aged_18_24_pct', F.col('population_male_aged_18_24_pct'))
          .withColumn('population_male_aged_25_34_pct', F.col('population_male_aged_25_34_pct'))
          .withColumn('population_male_aged_35_44_pct', F.col('population_male_aged_35_44_pct'))
          .withColumn('population_male_aged_45_54_pct', F.col('population_male_aged_45_54_pct'))
          .withColumn('population_male_aged_55_64_pct', F.col('population_male_aged_55_64_pct'))
          .withColumn('population_male_aged_65_74_pct', F.col('population_male_aged_65_74_pct'))
          .withColumn('population_male_aged_75_84_pct', F.col('population_male_aged_75_84_pct'))
          .withColumn('population_male_aged_85p_pct', F.col('population_male_aged_85p_pct'))
          .withColumn('population_female_aged_0_5_pct', F.col('population_female_aged_0_5_pct'))
          .withColumn('population_female_aged_6_11_pct', F.col('population_female_aged_6_11_pct'))
          .withColumn('population_female_aged_12_17_pct', F.col('population_female_aged_12_17_pct'))
          .withColumn('population_female_aged_18_24_pct', F.col('population_female_aged_18_24_pct'))
          .withColumn('population_female_aged_25_34_pct', F.col('population_female_aged_25_34_pct'))
          .withColumn('population_female_aged_35_44_pct', F.col('population_female_aged_35_44_pct'))
          .withColumn('population_female_aged_45_54_pct', F.col('population_female_aged_45_54_pct'))
          .withColumn('population_female_aged_55_64_pct', F.col('population_female_aged_55_64_pct'))
          .withColumn('population_female_aged_65_74_pct', F.col('population_female_aged_65_74_pct'))
          .withColumn('population_female_aged_75_84_pct', F.col('population_female_aged_75_84_pct'))
          .withColumn('population_female_aged_85p_pct', F.col('population_female_aged_85p_pct'))
          .withColumn('population_males_never_married_pct', F.col('population_males_never_married_pct'))
          .withColumn('population_males_widowed_pct', F.col('population_males_widowed_pct'))
          .withColumn('population_males_divorced_pct', F.col('population_males_divorced_pct'))
          .withColumn('population_males_married_pct', F.col('population_males_married_pct'))
          .withColumn('population_males_married_and_together_pct', F.col('population_males_married_and_together_pct'))
          .withColumn('population_males_married_and_separated_pct', F.col('population_males_married_and_separated_pct'))
          .withColumn('population_males_married_and_absent_pct', F.col('population_males_married_and_absent_pct'))
          .withColumn('population_females_never_married_pct', F.col('population_females_never_married_pct'))
          .withColumn('population_females_widowed_pct', F.col('population_females_widowed_pct'))
          .withColumn('population_females_divorced_pct', F.col('population_females_divorced_pct'))
          .withColumn('population_females_married_pct', F.col('population_females_married_pct'))
          .withColumn('population_females_married_and_together_pct', F.col('population_females_married_and_together_pct'))
          .withColumn('population_females_married_and_separated_pct', F.col('population_females_married_and_separated_pct'))
          .withColumn('population_females_married_and_absent_pct', F.col('population_females_married_and_absent_pct'))
          .withColumn('population_primary_language_english_pct', F.col('population_primary_language_english_pct'))
          .withColumn('population_primary_language_spanish_pct', F.col('population_primary_language_spanish_pct'))
          .withColumn('population_primary_language_other_indo_european_pct', F.col('population_primary_language_other_indo_european_pct'))
          .withColumn('population_primary_language_asian_or_other_pacific_island_pct', F.col('population_primary_language_asian_or_other_pacific_island_pct'))
          .withColumn('population_primary_language_other_pct', F.col('population_primary_language_other_pct'))
          .withColumn('population_citizen_native_pct', F.col('population_citizen_native_pct'))
          .withColumn('population_citizen_naturalized_pct', F.col('population_citizen_naturalized_pct'))
          .withColumn('population_non_citizen_pct', F.col('population_non_citizen_pct'))
          .withColumn('population_group_quarters_pct', F.col('population_group_quarters_pct'))
          .withColumn('population_institutional_group_quarters_pct', F.col('population_institutional_group_quarters_pct'))
          .withColumn('population_non_institutional_group_quarters_pct', F.col('population_non_institutional_group_quarters_pct'))
          .withColumn('population_in_poverty_pct', F.col('population_in_poverty_pct'))
          .withColumn('population_veterans_pct', F.col('population_veterans_pct'))
          .withColumn('family_median_size', F.col('family_median_size'))
          .withColumn('families_1_person_pct', F.col('families_1_person_pct'))
          .withColumn('families_2_persons_pct', F.col('families_2_persons_pct'))
          .withColumn('families_3_persons_pct', F.col('families_3_persons_pct'))
          .withColumn('families_4_persons_pct', F.col('families_4_persons_pct'))
          .withColumn('families_5_persons_pct', F.col('families_5_persons_pct'))
          .withColumn('families_6_persons_pct', F.col('families_6_persons_pct'))
          .withColumn('families_7_or_more_persons_pct', F.col('families_7_or_more_persons_pct'))
          .withColumn('non_family_median_size', F.col('non_family_median_size'))
          .withColumn('non_families_1_person_pct', F.col('non_families_1_person_pct'))
          .withColumn('non_families_2_persons_pct', F.col('non_families_2_persons_pct'))
          .withColumn('non_families_3_persons_pct', F.col('non_families_3_persons_pct'))
          .withColumn('non_families_4_persons_pct', F.col('non_families_4_persons_pct'))
          .withColumn('non_families_5_persons_pct', F.col('non_families_5_persons_pct'))
          .withColumn('non_families_6_persons_pct', F.col('non_families_6_persons_pct'))
          .withColumn('non_families_7_or_more_persons_pct', F.col('non_families_7_or_more_persons_pct'))
          .withColumn('median_travel_time_to_work_mi', F.col('median_travel_time_to_work_mi'))
          .withColumn('travel_time_to_work_0_14_mi_pct', F.col('travel_time_to_work_0_14_mi_pct'))
          .withColumn('travel_time_to_work_15_29_mi_pct', F.col('travel_time_to_work_15_29_mi_pct'))
          .withColumn('travel_time_to_work_30_59_mi_pct', F.col('travel_time_to_work_30_59_mi_pct'))
          .withColumn('travel_time_to_work_60_89_mi_pct', F.col('travel_time_to_work_60_89_mi_pct'))
          .withColumn('travel_time_to_work_90_or_more_mi_pct', F.col('travel_time_to_work_90_or_more_mi_pct'))
          .withColumn('transportation_public_pct', F.col('transportation_public_pct'))
          .withColumn('transportation_car_pct', F.col('transportation_car_pct'))
          .withColumn('transportation_motorcycle_pct', F.col('transportation_motorcycle_pct'))
          .withColumn('transportation_bicycle_pct', F.col('transportation_bicycle_pct'))
          .withColumn('transportation_walk_pct', F.col('transportation_walk_pct'))
          .withColumn('transportation_other_pct', F.col('transportation_other_pct'))
          .withColumn('transportation_work_from_home_pct', F.col('transportation_work_from_home_pct'))
          .withColumn('transportation_public_bus_pct', F.col('transportation_public_bus_pct'))
          .withColumn('transportation_public_trolley_pct', F.col('transportation_public_trolley_pct'))
          .withColumn('transportation_public_light_rail_pct', F.col('transportation_public_light_rail_pct'))
          .withColumn('transportation_public_railroad_pct', F.col('transportation_public_railroad_pct'))
          .withColumn('transportation_public_ferry_pct', F.col('transportation_public_ferry_pct'))
          .withColumn('transportation_public_taxi_pct', F.col('transportation_public_taxi_pct'))
          .withColumn('transportation_car_alone_pct', F.col('transportation_car_alone_pct'))
          .withColumn('transportation_car_carpool_pct', F.col('transportation_car_carpool_pct'))
          .withColumn('householder_median_age', F.col('householder_median_age'))
          .withColumn('householder_age_0_24_pct', F.col('householder_age_0_24_pct'))
          .withColumn('householder_age_25_34_pct', F.col('householder_age_25_34_pct'))
          .withColumn('householder_age_35_44_pct', F.col('householder_age_35_44_pct'))
          .withColumn('householder_age_45_54_pct', F.col('householder_age_45_54_pct'))
          .withColumn('householder_age_55_64_pct', F.col('householder_age_55_64_pct'))
          .withColumn('householder_age_65_74_pct', F.col('householder_age_65_74_pct'))
          .withColumn('householder_age_75_84_pct', F.col('householder_age_75_84_pct'))
          .withColumn('householder_age_85_and_over_pct', F.col('householder_age_85_and_over_pct'))
          .withColumn('median_household_size', F.col('median_household_size'))
          .withColumn('households_1_person_pct', F.col('households_1_person_pct'))
          .withColumn('households_2_persons_pct', F.col('households_2_persons_pct'))
          .withColumn('households_3_persons_pct', F.col('households_3_persons_pct'))
          .withColumn('households_4_persons_pct', F.col('households_4_persons_pct'))
          .withColumn('households_5_persons_pct', F.col('households_5_persons_pct'))
          .withColumn('households_6_persons_pct', F.col('households_6_persons_pct'))
          .withColumn('households_7_or_more_persons_pct', F.col('households_7_or_more_persons_pct'))
          .withColumn('housing_units', F.col('housing_units'))
          .withColumn('housing_units_occupied', F.col('housing_units_occupied'))
          .withColumn('housing_units_vacant', F.col('housing_units_vacant'))
          .withColumn('housing_units_occupied_pct', F.col('housing_units_occupied_pct'))
          .withColumn('housing_units_vacant_pct', F.col('housing_units_vacant_pct'))
          .withColumn('housing_units_vacant_for_rent_pct', F.col('housing_units_vacant_for_rent_pct'))
          .withColumn('housing_units_vacant_rented_not_occupied_pct', F.col('housing_units_vacant_rented_not_occupied_pct'))
          .withColumn('housing_units_vacant_for_sale_pct', F.col('housing_units_vacant_for_sale_pct'))
          .withColumn('housing_units_vacant_sold_not_occupied_pct', F.col('housing_units_vacant_sold_not_occupied_pct'))
          .withColumn('housing_units_vacant_seasonal_pct', F.col('housing_units_vacant_seasonal_pct'))
          .withColumn('housing_units_vacant_for_migrant_workers_pct', F.col('housing_units_vacant_for_migrant_workers_pct'))
          .withColumn('housing_units_vacant_other_pct', F.col('housing_units_vacant_other_pct'))
          .withColumn('housing_units_owner_occupied', F.col('housing_units_owner_occupied'))
          .withColumn('housing_units_renter_occupied', F.col('housing_units_renter_occupied'))
          .withColumn('housing_units_owner_occupied_pct', F.col('housing_units_owner_occupied_pct'))
          .withColumn('housing_units_renter_occupied_pct', F.col('housing_units_renter_occupied_pct'))
          .withColumn('housing_occupied_structure_1_unit_detached_pct', F.col('housing_occupied_structure_1_unit_detached_pct'))
          .withColumn('housing_occupied_structure_1_unit_attached_pct', F.col('housing_occupied_structure_1_unit_attached_pct'))
          .withColumn('housing_occupied_structure_2_units_pct', F.col('housing_occupied_structure_2_units_pct'))
          .withColumn('housing_occupied_structure_3_4_units_pct', F.col('housing_occupied_structure_3_4_units_pct'))
          .withColumn('housing_occupied_structure_5_9_units_pct', F.col('housing_occupied_structure_5_9_units_pct'))
          .withColumn('housing_occupied_structure_10_19_units_pct', F.col('housing_occupied_structure_10_19_units_pct'))
          .withColumn('housing_occupied_structure_20_49_units_pct', F.col('housing_occupied_structure_20_49_units_pct'))
          .withColumn('housing_occupied_structure_50_or_more_units_pct', F.col('housing_occupied_structure_50_or_more_units_pct'))
          .withColumn('housing_occupied_structure_trailer_pct', F.col('housing_occupied_structure_trailer_pct'))
          .withColumn('housing_occupied_structure_other_pct', F.col('housing_occupied_structure_other_pct'))
          .withColumn('housing_median_rent', F.col('housing_median_rent'))
          .withColumn('housing_rent_less_than_250_pct', F.col('housing_rent_less_than_250_pct'))
          .withColumn('housing_rent_250_499_pct', F.col('housing_rent_250_499_pct'))
          .withColumn('housing_rent_500_749_pct', F.col('housing_rent_500_749_pct'))
          .withColumn('housing_rent_750_999_pct', F.col('housing_rent_750_999_pct'))
          .withColumn('housing_rent_1000_1249_pct', F.col('housing_rent_1000_1249_pct'))
          .withColumn('housing_rent_1250_1499_pct', F.col('housing_rent_1250_1499_pct'))
          .withColumn('housing_rent_1500_1999_pct', F.col('housing_rent_1500_1999_pct'))
          .withColumn('housing_rent_2000_or_more_pct', F.col('housing_rent_2000_or_more_pct'))
          .withColumn('housing_rent_no_cash_pct', F.col('housing_rent_no_cash_pct'))
          .withColumn('housing_owner_households_with_mortgage_pct', F.col('housing_owner_households_with_mortgage_pct'))
          .withColumn('housing_owner_households_without_mortgage_pct', F.col('housing_owner_households_without_mortgage_pct'))
          .withColumn('housing_owner_households_median_value', F.col('housing_owner_households_median_value'))
          .withColumn('housing_owner_households_valued_less_than_10000_pct', F.col('housing_owner_households_valued_less_than_10000_pct'))
          .withColumn('housing_owner_households_valued_10000_14999_pct', F.col('housing_owner_households_valued_10000_14999_pct'))
          .withColumn('housing_owner_households_valued_15000_19999_pct', F.col('housing_owner_households_valued_15000_19999_pct'))
          .withColumn('housing_owner_households_valued_20000_24999_pct', F.col('housing_owner_households_valued_20000_24999_pct'))
          .withColumn('housing_owner_households_valued_25000_29999_pct', F.col('housing_owner_households_valued_25000_29999_pct'))
          .withColumn('housing_owner_households_valued_30000_34999_pct', F.col('housing_owner_households_valued_30000_34999_pct'))
          .withColumn('housing_owner_households_valued_35000_39999_pct', F.col('housing_owner_households_valued_35000_39999_pct'))
          .withColumn('housing_owner_households_valued_40000_49999_pct', F.col('housing_owner_households_valued_40000_49999_pct'))
          .withColumn('housing_owner_households_valued_50000_59999_pct', F.col('housing_owner_households_valued_50000_59999_pct'))
          .withColumn('housing_owner_households_valued_60000_69999_pct', F.col('housing_owner_households_valued_60000_69999_pct'))
          .withColumn('housing_owner_households_valued_70000_79999_pct', F.col('housing_owner_households_valued_70000_79999_pct'))
          .withColumn('housing_owner_households_valued_80000_89999_pct', F.col('housing_owner_households_valued_80000_89999_pct'))
          .withColumn('housing_owner_households_valued_90000_99999_pct', F.col('housing_owner_households_valued_90000_99999_pct'))
          .withColumn('housing_owner_households_valued_100000_124999_pct', F.col('housing_owner_households_valued_100000_124999_pct'))
          .withColumn('housing_owner_households_valued_125000_149999_pct', F.col('housing_owner_households_valued_125000_149999_pct'))
          .withColumn('housing_owner_households_valued_150000_174999_pct', F.col('housing_owner_households_valued_150000_174999_pct'))
          .withColumn('housing_owner_households_valued_175000_199999_pct', F.col('housing_owner_households_valued_175000_199999_pct'))
          .withColumn('housing_owner_households_valued_200000_249999_pct', F.col('housing_owner_households_valued_200000_249999_pct'))
          .withColumn('housing_owner_households_valued_250000_299999_pct', F.col('housing_owner_households_valued_250000_299999_pct'))
          .withColumn('housing_owner_households_valued_300000_399999_pct', F.col('housing_owner_households_valued_300000_399999_pct'))
          .withColumn('housing_owner_households_valued_400000_499999_pct', F.col('housing_owner_households_valued_400000_499999_pct'))
          .withColumn('housing_owner_households_valued_500000_749999_pct', F.col('housing_owner_households_valued_500000_749999_pct'))
          .withColumn('housing_owner_households_valued_750000_999999_pct', F.col('housing_owner_households_valued_750000_999999_pct'))
          .withColumn('housing_owner_households_valued_1000000_or_more_pct', F.col('housing_owner_households_valued_1000000_or_more_pct'))
          .withColumn('households_median_vehicles', F.col('households_median_vehicles'))
          .withColumn('households_with_no_vehicles_pct', F.col('households_with_no_vehicles_pct'))
          .withColumn('households_with_1_vehicle_pct', F.col('households_with_1_vehicle_pct'))
          .withColumn('households_with_2_vehicles_pct', F.col('households_with_2_vehicles_pct'))
          .withColumn('households_with_3_vehicles_pct', F.col('households_with_3_vehicles_pct'))
          .withColumn('households_with_4_or_more_vehicles_pct', F.col('households_with_4_or_more_vehicles_pct'))
          .withColumn('housing_median_built_yr', F.col('housing_median_built_yr'))
          .withColumn('housing_built_2005_or_later_pct', F.col('housing_built_2005_or_later_pct'))
          .withColumn('housing_built_2000_2004_pct', F.col('housing_built_2000_2004_pct'))
          .withColumn('housing_built_1990_1999_pct', F.col('housing_built_1990_1999_pct'))
          .withColumn('housing_built_1980_1989_pct', F.col('housing_built_1980_1989_pct'))
          .withColumn('housing_built_1970_1979_pct', F.col('housing_built_1970_1979_pct'))
          .withColumn('housing_built_1960_1969_pct', F.col('housing_built_1960_1969_pct'))
          .withColumn('housing_built_1950_1959_pct', F.col('housing_built_1950_1959_pct'))
          .withColumn('housing_built_1940_1949_pct', F.col('housing_built_1940_1949_pct'))
          .withColumn('housing_built_1939_or_earlier_pct', F.col('housing_built_1939_or_earlier_pct'))
          .withColumn('median_length_of_residence_yr', F.col('median_length_of_residence_yr'))
          .withColumn('moved_in_2005_or_later_pct', F.col('moved_in_2005_or_later_pct'))
          .withColumn('moved_in_2000_2004_pct', F.col('moved_in_2000_2004_pct'))
          .withColumn('moved_in_1990_1999_pct', F.col('moved_in_1990_1999_pct'))
          .withColumn('moved_in_1980_1989_pct', F.col('moved_in_1980_1989_pct'))
          .withColumn('moved_in_1970_1979_pct', F.col('moved_in_1970_1979_pct'))
          .withColumn('moved_in_1969_or_earlier_pct', F.col('moved_in_1969_or_earlier_pct'))
          .withColumn('personal_income', F.col('personal_income'))
          .withColumn('household_income', F.col('household_income'))
          .withColumn('median_household_income', F.col('median_household_income'))
          .withColumn('avg_household_income', F.col('avg_household_income'))
          .withColumn('household_income_per_capita', F.col('household_income_per_capita'))
          .withColumn('household_income_high_income_avg', F.col('household_income_high_income_avg'))
          .withColumn('households_income_less_than_15000_pct', F.col('households_income_less_than_15000_pct'))
          .withColumn('households_income_15000_24999_pct', F.col('households_income_15000_24999_pct'))
          .withColumn('households_income_25000_34999_pct', F.col('households_income_25000_34999_pct'))
          .withColumn('households_income_35000_49999_pct', F.col('households_income_35000_49999_pct'))
          .withColumn('households_income_50000_74999_pct', F.col('households_income_50000_74999_pct'))
          .withColumn('households_income_75000_99999_pct', F.col('households_income_75000_99999_pct'))
          .withColumn('households_income_100000_124999_pct', F.col('households_income_100000_124999_pct'))
          .withColumn('households_income_125000_149999_pct', F.col('households_income_125000_149999_pct'))
          .withColumn('households_income_150000_199999_pct', F.col('households_income_150000_199999_pct'))
          .withColumn('households_income_200000_and_over_pct', F.col('households_income_200000_and_over_pct'))
          .withColumn('family_income', F.col('family_income'))
          .withColumn('family_median_income', F.col('family_median_income'))
          .withColumn('family_avg_income', F.col('family_avg_income'))
          .withColumn('family_per_capita_income', F.col('family_per_capita_income'))
          .withColumn('family_income_high_income_avg', F.col('family_income_high_income_avg'))
          .withColumn('families_income_less_than_15000_pct', F.col('families_income_less_than_15000_pct'))
          .withColumn('families_income_15000_24999_pct', F.col('families_income_15000_24999_pct'))
          .withColumn('families_income_25000_34999_pct', F.col('families_income_25000_34999_pct'))
          .withColumn('families_income_35000_49999_pct', F.col('families_income_35000_49999_pct'))
          .withColumn('families_income_50000_74999_pct', F.col('families_income_50000_74999_pct'))
          .withColumn('families_income_75000_99999_pct', F.col('families_income_75000_99999_pct'))
          .withColumn('families_income_100000_124999_pct', F.col('families_income_100000_124999_pct'))
          .withColumn('families_income_125000_149999_pct', F.col('families_income_125000_149999_pct'))
          .withColumn('families_income_150000_199999_pct', F.col('families_income_150000_199999_pct'))
          .withColumn('families_income_200000_and_over_pct', F.col('families_income_200000_and_over_pct'))
          .withColumn('non_family_income', F.col('non_family_income'))
          .withColumn('non_family_median_income', F.col('non_family_median_income'))
          .withColumn('non_family_avg_income', F.col('non_family_avg_income'))
          .withColumn('non_family_per_capita_income', F.col('non_family_per_capita_income'))
          .withColumn('non_family_income_high_income_avg', F.col('non_family_income_high_income_avg'))
          .withColumn('non_families_income_less_than_15000_pct', F.col('non_families_income_less_than_15000_pct'))
          .withColumn('non_families_income_15000_24999_pct', F.col('non_families_income_15000_24999_pct'))
          .withColumn('non_families_income_25000_34999_pct', F.col('non_families_income_25000_34999_pct'))
          .withColumn('non_families_income_35000_49999_pct', F.col('non_families_income_35000_49999_pct'))
          .withColumn('non_families_income_50000_74999_pct', F.col('non_families_income_50000_74999_pct'))
          .withColumn('non_families_income_75000_99999_pct', F.col('non_families_income_75000_99999_pct'))
          .withColumn('non_families_income_100000_124999_pct', F.col('non_families_income_100000_124999_pct'))
          .withColumn('non_families_income_125000_149999_pct', F.col('non_families_income_125000_149999_pct'))
          .withColumn('non_families_income_150000_199999_pct', F.col('non_families_income_150000_199999_pct'))
          .withColumn('non_families_income_200000_and_over_pct', F.col('non_families_income_200000_and_over_pct'))
          .withColumn('enrollment_public_preprimary_pct', F.col('enrollment_public_preprimary_pct'))
          .withColumn('enrollment_private_preprimary_pct', F.col('enrollment_private_preprimary_pct'))
          .withColumn('enrollment_public_kindergarten_pct', F.col('enrollment_public_kindergarten_pct'))
          .withColumn('enrollment_private_kindergarten_pct', F.col('enrollment_private_kindergarten_pct'))
          .withColumn('enrollment_public_grades_1_4_pct', F.col('enrollment_public_grades_1_4_pct'))
          .withColumn('enrollment_private_grades_1_4_pct', F.col('enrollment_private_grades_1_4_pct'))
          .withColumn('enrollment_public_grades_5_8_pct', F.col('enrollment_public_grades_5_8_pct'))
          .withColumn('enrollment_private_grades_5_8_pct', F.col('enrollment_private_grades_5_8_pct'))
          .withColumn('enrollment_public_grades_9_12_pct', F.col('enrollment_public_grades_9_12_pct'))
          .withColumn('enrollment_private_grades_9_12_pct', F.col('enrollment_private_grades_9_12_pct'))
          .withColumn('enrollment_public_undergraduate_college_pct', F.col('enrollment_public_undergraduate_college_pct'))
          .withColumn('enrollment_private_undergraduate_college_pct', F.col('enrollment_private_undergraduate_college_pct'))
          .withColumn('enrollment_public_graduate_or_professional_school_pct', F.col('enrollment_public_graduate_or_professional_school_pct'))
          .withColumn('enrollment_private_graduate_or_professional_school_pct', F.col('enrollment_private_graduate_or_professional_school_pct'))
          .withColumn('enrollment_not_enrolled_in_school_pct', F.col('enrollment_not_enrolled_in_school_pct'))
          .withColumn('education_some_hs_pct', F.col('education_some_hs_pct'))
          .withColumn('education_hs_pct', F.col('education_hs_pct'))
          .withColumn('education_some_college_pct', F.col('education_some_college_pct'))
          .withColumn('education_assoc_degree_pct', F.col('education_assoc_degree_pct'))
          .withColumn('education_bach_degree_pct', F.col('education_bach_degree_pct'))
          .withColumn('education_mast_degree_pct', F.col('education_mast_degree_pct'))
          .withColumn('education_prof_degree_pct', F.col('education_prof_degree_pct'))
          .withColumn('education_doct_degree_pct', F.col('education_doct_degree_pct'))
          .withColumn('education_grad_degree_pct', F.col('education_grad_degree_pct'))
          .withColumn('population_16p_civilian_male_pct', F.col('population_16p_civilian_male_pct'))
          .withColumn('population_16p_civilian_female_pct', F.col('population_16p_civilian_female_pct'))
          .withColumn('population_16p_armed_forces_male_pct', F.col('population_16p_armed_forces_male_pct'))
          .withColumn('population_16p_armed_forces_female_pct', F.col('population_16p_armed_forces_female_pct'))
          .withColumn('population_16p_unemployed_male_pct', F.col('population_16p_unemployed_male_pct'))
          .withColumn('population_16p_unemployed_female_pct', F.col('population_16p_unemployed_female_pct'))
          .withColumn('population_16p_not_in_the_labor_force_male_pct', F.col('population_16p_not_in_the_labor_force_male_pct'))
          .withColumn('population_16p_not_in_the_labor_force_female_pct_pct', F.col('population_16p_not_in_the_labor_force_female_pct_pct'))
          .withColumn('emp_agri_pct', F.col('emp_agri_pct'))
          .withColumn('emp_mine_pct', F.col('emp_mine_pct'))
          .withColumn('emp_const_pct', F.col('emp_const_pct'))
          .withColumn('emp_manuf_pct', F.col('emp_manuf_pct'))
          .withColumn('emp_whole_pct', F.col('emp_whole_pct'))
          .withColumn('emp_retail_pct', F.col('emp_retail_pct'))
          .withColumn('emp_trans_pct', F.col('emp_trans_pct'))
          .withColumn('emp_utils_pct', F.col('emp_utils_pct'))
          .withColumn('emp_info_pct', F.col('emp_info_pct'))
          .withColumn('emp_finetc_pct', F.col('emp_finetc_pct'))
          .withColumn('emp_real_pct', F.col('emp_real_pct'))
          .withColumn('emp_prof_pct', F.col('emp_prof_pct'))
          .withColumn('emp_manag_pct', F.col('emp_manag_pct'))
          .withColumn('emp_admin_pct', F.col('emp_admin_pct'))
          .withColumn('emp_educ_pct', F.col('emp_educ_pct'))
          .withColumn('emp_health_pct', F.col('emp_health_pct'))
          .withColumn('emp_arts_pct', F.col('emp_arts_pct'))
          .withColumn('emp_accom_pct', F.col('emp_accom_pct'))
          .withColumn('emp_otsrv_pct', F.col('emp_otsrv_pct'))
          .withColumn('emp_pubad_pct', F.col('emp_pubad_pct'))
          .withColumn('occupation_management_business_and_financial_operations_pct', F.col('occupation_management_business_and_financial_operations_pct'))
          .withColumn('occupation_professional_and_related_pct', F.col('occupation_professional_and_related_pct'))
          .withColumn('occupation_sales_and_office_pct', F.col('occupation_sales_and_office_pct'))
          .withColumn('occupation_service_pct', F.col('occupation_service_pct'))
          .withColumn('occupation_farming_fishing_and_forestry_pct', F.col('occupation_farming_fishing_and_forestry_pct'))
          .withColumn('occupation_construction_extraction_and_maintenance_pct', F.col('occupation_construction_extraction_and_maintenance_pct'))
          .withColumn('occupation_production_transportation_and_material_moving_pct', F.col('occupation_production_transportation_and_material_moving_pct'))
          .withColumn('occupation_white_collar_pct', F.col('occupation_white_collar_pct'))
          .withColumn('occupation_blue_collar_pct', F.col('occupation_blue_collar_pct'))
          .withColumn('private_for_profit_employee_pct', F.col('private_for_profit_employee_pct'))
          .withColumn('private_for_profit_self_employed_pct', F.col('private_for_profit_self_employed_pct'))
          .withColumn('private_not_for_profit_employee_pct', F.col('private_not_for_profit_employee_pct'))
          .withColumn('local_government_employee_pct', F.col('local_government_employee_pct'))
          .withColumn('state_government_employee_pct', F.col('state_government_employee_pct'))
          .withColumn('federal_government_employee_pct', F.col('federal_government_employee_pct'))
          .withColumn('not_incorporated_self_employed_pct', F.col('not_incorporated_self_employed_pct'))
          .withColumn('unpaid_family_worker_pct', F.col('unpaid_family_worker_pct'))
          .withColumn('employee_naics_cnt', F.col('employee_naics_cnt'))
          .withColumn('employee_forestry_fishing_hunting_agriculture_naics_pct', F.col('employee_forestry_fishing_hunting_agriculture_naics_pct'))
          .withColumn('employee_mining_naics_pct', F.col('employee_mining_naics_pct'))
          .withColumn('employee_utilities_naics_pct', F.col('employee_utilities_naics_pct'))
          .withColumn('employee_construction_naics_pct', F.col('employee_construction_naics_pct'))
          .withColumn('employee_manufacturing_naics_pct', F.col('employee_manufacturing_naics_pct'))
          .withColumn('employee_wholesale_trade_naics_pct', F.col('employee_wholesale_trade_naics_pct'))
          .withColumn('employee_retail_trade_naics_pct', F.col('employee_retail_trade_naics_pct'))
          .withColumn('employee_transportation_warehousing_naics_pct', F.col('employee_transportation_warehousing_naics_pct'))
          .withColumn('employee_information_naics_pct', F.col('employee_information_naics_pct'))
          .withColumn('employee_finance_insurance_naics_pct', F.col('employee_finance_insurance_naics_pct'))
          .withColumn('employee_real_estate_naics_pct', F.col('employee_real_estate_naics_pct'))
          .withColumn('employee_professional_scientific_technical_svcs_naics_pct', F.col('employee_professional_scientific_technical_svcs_naics_pct'))
          .withColumn('employee_management_companies_enterprises_naics_pct', F.col('employee_management_companies_enterprises_naics_pct'))
          .withColumn('employee_admin_support_waste_management_naics_pct', F.col('employee_admin_support_waste_management_naics_pct'))
          .withColumn('employee_education_services_naics_pct', F.col('employee_education_services_naics_pct'))
          .withColumn('employee_health_care_social_assistance_naics_pct', F.col('employee_health_care_social_assistance_naics_pct'))
          .withColumn('employee_arts_entertainment_recreation_naics_pct', F.col('employee_arts_entertainment_recreation_naics_pct'))
          .withColumn('employee_accommodation_food_svcs_naics_pct', F.col('employee_accommodation_food_svcs_naics_pct'))
          .withColumn('employee_other_svcs_excluding_public_admin_naics_pct', F.col('employee_other_svcs_excluding_public_admin_naics_pct'))
          .withColumn('establishment_naics_cnt', F.col('establishment_naics_cnt'))
          .withColumn('establishment_forestry_fishing_hunting_agriculture_naics_pct', F.col('establishment_forestry_fishing_hunting_agriculture_naics_pct'))
          .withColumn('establishment_mining_naics_pct', F.col('establishment_mining_naics_pct'))
          .withColumn('establishment_utilities_naics_pct', F.col('establishment_utilities_naics_pct'))
          .withColumn('establishment_construction_naics_pct', F.col('establishment_construction_naics_pct'))
          .withColumn('establishment_manufacturing_naics_pct', F.col('establishment_manufacturing_naics_pct'))
          .withColumn('establishment_wholesale_trade_naics_pct', F.col('establishment_wholesale_trade_naics_pct'))
          .withColumn('establishment_retail_trade_naics_pct', F.col('establishment_retail_trade_naics_pct'))
          .withColumn('establishment_transportation_warehousing_naics_pct', F.col('establishment_transportation_warehousing_naics_pct'))
          .withColumn('establishment_information_naics_pct', F.col('establishment_information_naics_pct'))
          .withColumn('establishment_finance_insurance_naics_pct', F.col('establishment_finance_insurance_naics_pct'))
          .withColumn('establishment_real_estate_naics_pct', F.col('establishment_real_estate_naics_pct'))
          .withColumn('establishment_professional_scientific_technical_svcs_naics_pct', F.col('establishment_professional_scientific_technical_svcs_naics_pct'))
          .withColumn('establishment_management_companies_enterprises_naics_pct', F.col('establishment_management_companies_enterprises_naics_pct'))
          .withColumn('establishment_admin_support_waste_management_naics_pct', F.col('establishment_admin_support_waste_management_naics_pct'))
          .withColumn('establishment_education_services_naics_pct', F.col('establishment_education_services_naics_pct'))
          .withColumn('establishment_health_care_social_assistance_naics_pct', F.col('establishment_health_care_social_assistance_naics_pct'))
          .withColumn('establishment_arts_entertainment_recreation_naics_pct', F.col('establishment_arts_entertainment_recreation_naics_pct'))
          .withColumn('establishment_accommodation_food_svcs_naics_pct', F.col('establishment_accommodation_food_svcs_naics_pct'))
          .withColumn('establishment_other_svcs_excluding_public_admin_naics_pct', F.col('establishment_other_svcs_excluding_public_admin_naics_pct'))
          .withColumn('occupation_soc_cnt', F.col('occupation_soc_cnt'))
          .withColumn('occupation_management_soc_pct', F.col('occupation_management_soc_pct'))
          .withColumn('occupation_business_financial_operations_soc_pct', F.col('occupation_business_financial_operations_soc_pct'))
          .withColumn('occupation_computer_math_science_soc_pct', F.col('occupation_computer_math_science_soc_pct'))
          .withColumn('occupation_architecture_engineering_soc_pct', F.col('occupation_architecture_engineering_soc_pct'))
          .withColumn('occupation_life_physical_social_sciences_soc_pct', F.col('occupation_life_physical_social_sciences_soc_pct'))
          .withColumn('occupation_community_social_svcs_soc_pct', F.col('occupation_community_social_svcs_soc_pct'))
          .withColumn('occupation_legal_soc_pct', F.col('occupation_legal_soc_pct'))
          .withColumn('occupation_education_training_library_soc_pct', F.col('occupation_education_training_library_soc_pct'))
          .withColumn('occupation_art_design_entertainment_sports_media_soc_pct', F.col('occupation_art_design_entertainment_sports_media_soc_pct'))
          .withColumn('occupation_healthcare_practitioners_tech_ops_soc_pct', F.col('occupation_healthcare_practitioners_tech_ops_soc_pct'))
          .withColumn('occupation_healthcare_support_soc_pct', F.col('occupation_healthcare_support_soc_pct'))
          .withColumn('occupation_protective_service_soc_pct', F.col('occupation_protective_service_soc_pct'))
          .withColumn('occupation_food_preparation_serving_related_soc_pct', F.col('occupation_food_preparation_serving_related_soc_pct'))
          .withColumn('occupation_building_grounds_cleaning_maintenance_soc_pct', F.col('occupation_building_grounds_cleaning_maintenance_soc_pct'))
          .withColumn('occupation_personal_care_service_soc_pct', F.col('occupation_personal_care_service_soc_pct'))
          .withColumn('occupation_sales_soc_pct', F.col('occupation_sales_soc_pct'))
          .withColumn('occupation_administrative_support_soc_pct', F.col('occupation_administrative_support_soc_pct'))
          .withColumn('occupation_farming_fishing_forestry_soc_pct', F.col('occupation_farming_fishing_forestry_soc_pct'))
          .withColumn('occupation_construction_extraction_soc_pct', F.col('occupation_construction_extraction_soc_pct'))
          .withColumn('occupation_installation_maintenance_repair_soc_pct', F.col('occupation_installation_maintenance_repair_soc_pct'))
          .withColumn('occupation_production_operations_soc_pct', F.col('occupation_production_operations_soc_pct'))
          .withColumn('occupation_transportation_material_moving_soc_pct', F.col('occupation_transportation_material_moving_soc_pct'))
          .withColumn('households_heating_fuel_utility_gas_pct', F.col('households_heating_fuel_utility_gas_pct'))
          .withColumn('households_heating_fuel_bottled_tank_or_lp_gas_pct', F.col('households_heating_fuel_bottled_tank_or_lp_gas_pct'))
          .withColumn('households_heating_fuel_electricity_pct', F.col('households_heating_fuel_electricity_pct'))
          .withColumn('households_heating_fuel_fuel_oil_kerosene_pct', F.col('households_heating_fuel_fuel_oil_kerosene_pct'))
          .withColumn('households_heating_fuel_coal_coke_pct', F.col('households_heating_fuel_coal_coke_pct'))
          .withColumn('households_heating_fuel_wood_pct', F.col('households_heating_fuel_wood_pct'))
          .withColumn('households_heating_fuel_solar_energy_pct', F.col('households_heating_fuel_solar_energy_pct'))
          .withColumn('households_heating_fuel_other_fuel_pct', F.col('households_heating_fuel_other_fuel_pct'))
          .withColumn('households_heating_fuel_none_pct', F.col('households_heating_fuel_none_pct'))
          .withColumn('retail_sales_amt', F.col('retail_sales_amt'))
          .withColumn('furniture_and_home_furnishing_sales_amt', F.col('furniture_and_home_furnishing_sales_amt'))
          .withColumn('electrical_and_appliance_store_sales_amt', F.col('electrical_and_appliance_store_sales_amt'))
          .withColumn('building_materials_and_garden_store_sales_amt', F.col('building_materials_and_garden_store_sales_amt'))
          .withColumn('food_and_beverage_store_sales_amt', F.col('food_and_beverage_store_sales_amt'))
          .withColumn('health_and_personal_care_store_sales_amt', F.col('health_and_personal_care_store_sales_amt'))
          .withColumn('gas_station_store_sales_amt', F.col('gas_station_store_sales_amt'))
          .withColumn('clothing_and_accessories_store_sales_amt', F.col('clothing_and_accessories_store_sales_amt'))
          .withColumn('sporting_goods_store_sales_amt', F.col('sporting_goods_store_sales_amt'))
          .withColumn('general_merchandise_store_sales_amt', F.col('general_merchandise_store_sales_amt'))
          .withColumn('miscellaneous_store_sales_amt', F.col('miscellaneous_store_sales_amt'))
          .withColumn('non_store_purchase_sales_amt', F.col('non_store_purchase_sales_amt'))
          .withColumn('food_services_sales_amt', F.col('food_services_sales_amt'))
          .withColumn('cpi', F.col('cpi'))
          .withColumn('cpi_apparel', F.col('cpi_apparel'))
          .withColumn('cpi_education_and_communications', F.col('cpi_education_and_communications'))
          .withColumn('cpi_food_and_beverages', F.col('cpi_food_and_beverages'))
          .withColumn('cpi_other_goods_and_services', F.col('cpi_other_goods_and_services'))
          .withColumn('cpi_housing', F.col('cpi_housing'))
          .withColumn('cpi_medical_care', F.col('cpi_medical_care'))
          .withColumn('cpi_recreation', F.col('cpi_recreation'))
          .withColumn('cpi_transportation', F.col('cpi_transportation'))
          .withColumn('annual_expenditures', F.col('annual_expenditures'))
          .withColumn('food', F.col('food'))
          .withColumn('food_at_home', F.col('food_at_home'))
          .withColumn('cereals_and_bakery_products', F.col('cereals_and_bakery_products'))
          .withColumn('dairy', F.col('dairy'))
          .withColumn('fruits_and_vegetables', F.col('fruits_and_vegetables'))
          .withColumn('non_alcoholic_beverages', F.col('non_alcoholic_beverages'))
          .withColumn('food_prepared_by_consumer_unit_on_trips', F.col('food_prepared_by_consumer_unit_on_trips'))
          .withColumn('local_restaurants', F.col('local_restaurants'))
          .withColumn('restaurants_on_trips', F.col('restaurants_on_trips'))
          .withColumn('alcoholic_beverages', F.col('alcoholic_beverages'))
          .withColumn('housing', F.col('housing'))
          .withColumn('household_operations', F.col('household_operations'))
          .withColumn('housekeeping_services', F.col('housekeeping_services'))
          .withColumn('household_furnishings_and_equipment', F.col('household_furnishings_and_equipment'))
          .withColumn('household_textiles', F.col('household_textiles'))
          .withColumn('furniture', F.col('furniture'))
          .withColumn('floor_coverings', F.col('floor_coverings'))
          .withColumn('major_appliances', F.col('major_appliances'))
          .withColumn('small_appliances', F.col('small_appliances'))
          .withColumn('miscellaneous_household_equipment', F.col('miscellaneous_household_equipment'))
          .withColumn('apparel_and_services', F.col('apparel_and_services'))
          .withColumn('men_and_boys', F.col('men_and_boys'))
          .withColumn('men_16_and_over', F.col('men_16_and_over'))
          .withColumn('boys', F.col('boys'))
          .withColumn('women_and_girls', F.col('women_and_girls'))
          .withColumn('women_16_and_over', F.col('women_16_and_over'))
          .withColumn('girls', F.col('girls'))
          .withColumn('children', F.col('children'))
          .withColumn('footwear', F.col('footwear'))
          .withColumn('other_apparel_products_and_services', F.col('other_apparel_products_and_services'))
          .withColumn('transportation', F.col('transportation'))
          .withColumn('vehicle_purchase_net_outlay', F.col('vehicle_purchase_net_outlay'))
          .withColumn('gasoline_and_motor_oil', F.col('gasoline_and_motor_oil'))
          .withColumn('other_vehicle_expenses', F.col('other_vehicle_expenses'))
          .withColumn('public_transportation', F.col('public_transportation'))
          .withColumn('healthcare', F.col('healthcare'))
          .withColumn('health_insurance', F.col('health_insurance'))
          .withColumn('medical_services', F.col('medical_services'))
          .withColumn('drugs', F.col('drugs'))
          .withColumn('medical_supplies', F.col('medical_supplies'))
          .withColumn('entertainment', F.col('entertainment'))
          .withColumn('feeds_and_admissions', F.col('feeds_and_admissions'))
          .withColumn('audio_and_visual_equipment_and_services', F.col('audio_and_visual_equipment_and_services'))
          .withColumn('pets_toys_hobbies_and_playground_equipment', F.col('pets_toys_hobbies_and_playground_equipment'))
          .withColumn('other_entertainment_supplies_equipment_and_services', F.col('other_entertainment_supplies_equipment_and_services'))
          .withColumn('personal_care_products_and_services', F.col('personal_care_products_and_services'))
          .withColumn('reading', F.col('reading'))
          .withColumn('education', F.col('education'))
          .withColumn('tobacco', F.col('tobacco'))
          .withColumn('cash_contributions', F.col('cash_contributions'))
          .withColumn('personal_insurance_and_pensions', F.col('personal_insurance_and_pensions'))
          .withColumn('mortality_index', F.col('mortality_index'))
          .withColumn('murder_index', F.col('murder_index'))
          .withColumn('forcible_rape_index', F.col('forcible_rape_index'))
          .withColumn('forcible_robbery_index', F.col('forcible_robbery_index'))
          .withColumn('aggravated_assault_index', F.col('aggravated_assault_index'))
          .withColumn('burglary_index', F.col('burglary_index'))
          .withColumn('larceny_index', F.col('larceny_index'))
          .withColumn('motor_vehicle_index', F.col('motor_vehicle_index'))
          .withColumn('crime_index', F.col('crime_index'))
          .withColumn('ozone_index', F.col('ozone_index'))
          .withColumn('lead_index', F.col('lead_index'))
          .withColumn('carbon_monoxide_index', F.col('carbon_monoxide_index'))
          .withColumn('nitrogen_dioxide_index', F.col('nitrogen_dioxide_index'))
          .withColumn('particulate_matter_index', F.col('particulate_matter_index'))
          .withColumn('air_pollution_index', F.col('air_pollution_index'))
          .withColumn('weather_index', F.col('weather_index'))
          .withColumn('earthquake_index', F.col('earthquake_index'))
          .withColumn('hail_index', F.col('hail_index'))
          .withColumn('hurricane_index', F.col('hurricane_index'))
          .withColumn('tornado_index', F.col('tornado_index'))
          .withColumn('wind_index', F.col('wind_index'))
          .withColumn('annual_avg_temp_min', F.col('annual_avg_temp_min'))
          .withColumn('annual_avg_temp_max', F.col('annual_avg_temp_max'))
          .withColumn('annual_avg_temp', F.col('annual_avg_temp'))
          .withColumn('possible_sunshine_pct', F.col('possible_sunshine_pct'))
          .withColumn('sky_cover_mean', F.col('sky_cover_mean'))
          .withColumn('clear_day_mean', F.col('clear_day_mean'))
          .withColumn('rainy_day_mean', F.col('rainy_day_mean'))
          .withColumn('snow_day_mean', F.col('snow_day_mean'))
          .withColumn('annual_precip_in', F.col('annual_precip_in'))
          .withColumn('annual_snowfall_in', F.col('annual_snowfall_in'))
          .withColumn('avg_jan_low_temp', F.col('avg_jan_low_temp'))
          .withColumn('avg_feb_low_temp', F.col('avg_feb_low_temp'))
          .withColumn('avg_mar_low_temp', F.col('avg_mar_low_temp'))
          .withColumn('avg_apr_low_temp', F.col('avg_apr_low_temp'))
          .withColumn('avg_may_low_temp', F.col('avg_may_low_temp'))
          .withColumn('avg_jun_low_temp', F.col('avg_jun_low_temp'))
          .withColumn('avg_jul_low_temp', F.col('avg_jul_low_temp'))
          .withColumn('avg_aug_low_temp', F.col('avg_aug_low_temp'))
          .withColumn('avg_sep_low_temp', F.col('avg_sep_low_temp'))
          .withColumn('avg_oct_low_temp', F.col('avg_oct_low_temp'))
          .withColumn('avg_nov_low_temp', F.col('avg_nov_low_temp'))
          .withColumn('avg_dec_low_temp', F.col('avg_dec_low_temp'))
          .withColumn('avg_jan_high_temp', F.col('avg_jan_high_temp'))
          .withColumn('avg_feb_high_temp', F.col('avg_feb_high_temp'))
          .withColumn('avg_mar_high_temp', F.col('avg_mar_high_temp'))
          .withColumn('avg_apr_high_temp', F.col('avg_apr_high_temp'))
          .withColumn('avg_may_high_temp', F.col('avg_may_high_temp'))
          .withColumn('avg_jun_high_temp', F.col('avg_jun_high_temp'))
          .withColumn('avg_jul_high_temp', F.col('avg_jul_high_temp'))
          .withColumn('avg_aug_high_temp', F.col('avg_aug_high_temp'))
          .withColumn('avg_sep_high_temp', F.col('avg_sep_high_temp'))
          .withColumn('avg_oct_high_temp', F.col('avg_oct_high_temp'))
          .withColumn('avg_nov_high_temp', F.col('avg_nov_high_temp'))
          .withColumn('avg_dec_high_temp', F.col('avg_dec_high_temp'))
          .withColumn('avg_jan_precip_in', F.col('avg_jan_precip_in'))
          .withColumn('avg_feb_precip_in', F.col('avg_feb_precip_in'))
          .withColumn('avg_mar_precip_in', F.col('avg_mar_precip_in'))
          .withColumn('avg_apr_precip_in', F.col('avg_apr_precip_in'))
          .withColumn('avg_may_precip_in', F.col('avg_may_precip_in'))
          .withColumn('avg_jun_precip_in', F.col('avg_jun_precip_in'))
          .withColumn('avg_jul_precip_in', F.col('avg_jul_precip_in'))
          .withColumn('avg_aug_precip_in', F.col('avg_aug_precip_in'))
          .withColumn('avg_sep_precip_in', F.col('avg_sep_precip_in'))
          .withColumn('avg_oct_precip_in', F.col('avg_oct_precip_in'))
          .withColumn('avg_nov_precip_in', F.col('avg_nov_precip_in'))
          .withColumn('avg_dec_precip_in', F.col('avg_dec_precip_in'))
          )

    # TODO: It appears spark will try to convert to utc for you which can screw things up if you already converted to utc
    return df.select(F.current_timestamp().alias('create_timestamp'),
                     F.lit(load_date).cast('date').alias('load_date'), F.col('*'))


def load(transformed_data, destination_path):
    """
    Load the transformed data to it's destination.
    """
    transformed_data.write.orc(destination_path, partitionBy='load_date', mode='overwrite', compression='snappy')


def load_bad(df, destination_path):
    """
    Load the bad records to the bad folder.
    """
    df \
        .write \
        .mode(saveMode='overwrite') \
        .text(destination_path, compression='none')


def update(table):
    """
    Update the Hive table partitions.
    """
    msck_cmd = 'MSCK REPAIR TABLE ' + table
    log.info(f'Running command: {msck_cmd}')
    spark.sql(msck_cmd)
    log.info(f'Completed command: {msck_cmd}')


def chain(self, f):
    """
    NOTE: This needs to be added to a library.

    Function that allows easily chaining together DataFrame transformations. Needs to be added to DataFrame class.
    """
    return f(self)


def parse_args():
    """
    Argument parsing function
    :return: Namespace containing all of the command line arguments
    """
    # Setup argument parsing
    parser = argparse.ArgumentParser(
        description='Spark program to process raw Neighborhoods files from Attom Jetstream.')
    parser.add_argument('-i', '--input', type=str, required=True, help='Specify path to the input file(s)')
    parser.add_argument('-s', '--schema', type=str, required=True, help='Specify path to the Schema.json')
    parser.add_argument('-o', '--output', type=str, required=True, help='Specify path to the output ORC file(s)')
    parser.add_argument('-salt', type=int, required=False, default=12,
                        help='Use salt to better distribute data during repartitions')
    parser.add_argument('-b', '--bad_data', type=str, required=True,
                        help='Specify path to the output ORC file(s) for bad records')
    parser.add_argument('-l', '--log', type=str, required=False, help='Specify path to the log directory',
                        default='/etl/log/')
    parser.add_argument('-d', '--debug', action='store_true', required=False, help='Specify log level as DEBUG')
    parser.add_argument('--start_date', type=lambda d: datetime.strptime(d, '%Y-%m-%d'), required=False,
                        help='Start date corresponding to raw folder name in format yyyy-MM-dd')
    parser.add_argument('--end_date', type=lambda d: datetime.strptime(d, '%Y-%m-%d'), required=False,
                        help='End date corresponding to raw folder name in format yyyy-MM-dd')
    parsed_args = parser.parse_args()

    return parsed_args


def get_date_from_input_folder(folder_path: str) -> datetime:
    deepest_folder = pathlib.Path(folder_path).stem
    return datetime.strptime(deepest_folder, '%Y%m%d')


if __name__ == '__main__':
    args = parse_args()
    salt = args.salt

    py_file = os.path.splitext(os.path.split(__file__)[1])[0]
    log = AmherstLogger(log_directory=args.log, log_file_app=py_file, vendor_name='ATTOM Jetstream',
                        vendor_product='CommunityInfo')

    log.info('Process started.')

    spark = SparkSession.builder \
        .enableHiveSupport() \
        .getOrCreate()

    # Add our helper function to DataFrame class
    DataFrame.chain = chain

    # get date vendor data was downloaded
    try:
        load_date = get_date_from_input_folder(args.input)
    except ValueError as err:
        log.warning("Input folder doesn't contain a date. Using datetime.utcnow() instead.")
        load_date = pytz.utc.localize(datetime.utcnow())

    log.info(f'load_date: {datetime.strftime(load_date, "%Y-%m-%d")}')

    main(args)
    log.info('Process complete.')
